# app/pdfs/base_report_pdf.rb
class BaseReportPdf < Prawn::Document
  def initialize(user)
    # Aumentamos el margen superior para dar espacio al nuevo encabezado
    super(page_size: "A4", top_margin: 32, bottom_margin: 32)
    @user = user
    setup_fonts
  end

  # Este método envuelve la creación del reporte para asegurar que el header y footer se rendericen
  def render_report(title:, start_date: nil, end_date: nil, &block)
    header(title, start_date: start_date, end_date: end_date)

    # How much space (in points) you want to leave at the bottom for footer-padding:
    footer_space = 40

    # Capture the current cursor (y-coordinate) right after the header:
    start_y = cursor

    # Create a bounding box that is “off-limits” below `footer_space`:
    bounding_box([ bounds.left, start_y ], width: bounds.width, height: start_y - footer_space) do
      block.call   # draw your table/content here
    end

    footer
  end

  private

  def setup_fonts
    #    Cambiamos a "Roboto". Prawn buscará los nuevos archivos en la misma ruta.
    font_families.update("Roboto" => {
      normal:      Rails.root.join("app/assets/fonts/Roboto-Regular.ttf"),
      bold:        Rails.root.join("app/assets/fonts/Roboto-Bold.ttf"),
      italic:      Rails.root.join("app/assets/fonts/Roboto-Italic.ttf"),
      bold_italic: Rails.root.join("app/assets/fonts/Roboto-BoldItalic.ttf")
    })
    # 2. Establece DejaVu como la fuente por defecto para todo el documento.
    font "Roboto"
  end

  def header(title, start_date: nil, end_date: nil)
    logo_path = Rails.root.join("app", "assets", "images", "StockWare_Logo.png")

    # 1. Posiciona el logo en la esquina superior izquierda de forma absoluta.
    #    `bounds.top` se refiere al límite superior del área de dibujo (debajo del margen).
    if File.exist?(logo_path)
      image logo_path, at: [ bounds.left, bounds.top ], width: 60
    end

    # 2. Mueve el cursor hacia abajo para empezar a dibujar el texto debajo del área del logo.
    #    La altura del logo es ~40, así que 50 nos da un buen margen.
    move_down 50

    # 3. Dibuja el título del reporte, centrado.
    text title, size: 22, style: :bold, align: :center
    move_down 15

    # 4. Define los datos para la tabla de metadatos.
    metadata_data = [ [
        "<u><b>Generated by:</b> #{@user.name}</u>",
        "<u><b>Date:</b> #{Time.zone.now.strftime('%Y-%m-%d')}</u>",
        "<u><b>Time:</b> #{Time.zone.now.strftime('%H:%M:%S')}</u>"
    ] ]

    # 5. Dibuja la tabla directamente, pasando los datos y las opciones.
    table(metadata_data, position: :center,
                         cell_style: { size: 10, inline_format: true, borders: [], padding: [ 2, 8, 2, 8 ] })

    # 6. Agrega el rango de fechas si fue proporcionado.
    if start_date.present? || end_date.present?
      # Construimos el texto con formato inline de Prawn, solo con "Period:" en negrita.
      period_string = "<b>Period:</b> "
      period_string += "from #{start_date} " if start_date.present?
      period_string += "to #{end_date}" if end_date.present?

      move_down 10
      # Dibujamos el texto formateado, subrayado para mantener consistencia.
      text "<u>#{period_string.strip}</u>", size: 10, inline_format: true, align: :center
    end

    move_down 20
  end

  def footer
    # Pie de página en inglés
    page_number_string = "Page <page> of <total>"
    options = { at: [ bounds.left, 10 ], width: bounds.width, align: :center, size: 10 }
    number_pages page_number_string, options
  end

  def format_currency(value)
    # Helper para formatear moneda, usado por las clases hijas
    "$#{format('%.2f', value.to_f.abs)}"
  end
end
